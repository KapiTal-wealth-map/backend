generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(uuid())
  email                   String            @unique
  name                    String
  password                String
  role                    String
  companyId               String
  mfaSecret               String?
  mfaEnabled              Boolean           @default(false)
  status                  String            @default("invited")
  lastLogin               DateTime?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  notificationPreferences Json              @default("{\"email\": true, \"inApp\": true}")
  auditLogs               AuditLog[]
  favouriteListings       FavoriteListing[]
  Report                  Report[]
  savedMapViews           SavedMapView[]
  company                 Company           @relation(fields: [companyId], references: [id])
}

model Company {
  id                 String   @id @default(uuid())
  name               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  dataAccessSettings Json?    @default("{\"restrictSensitiveData\": true, \"allowEmployeeDataExport\": false, \"allowPublicProfileViewing\": false, \"allowEmployeePropertySearch\": true}")
  logo               String?
  invites            Invite[]
  users              User[]
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String
  actionType  String
  description String
  ipAddress   String
  userAgent   String
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  role      String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  companyId String
  createdAt DateTime @default(now())
  status    String   @default("pending")
  company   Company  @relation(fields: [companyId], references: [id])
}

model Property {
  id             String   @id @default(cuid())
  address        String
  city           String
  state          String   @default("CA")
  zip            String
  lat            Float
  lng            Float
  createdAt      DateTime @default(now())
  estimatedValue Float?
  baths          Float?
  beds           Int?
  county         String?
  density        Int?
  medianIncome   Int?
  population     Int?
  sizeSqFt       Int?
  price          Float?
}

model FavoriteListing {
  id          String     @id @default(uuid())
  userId      String
  propertyId  String
  favoritedAt DateTime   @default(now())
  property    Property_1 @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User       @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Property_1 {
  Zip_Code                BigInt            @map("Zip Code")
  Price                   BigInt
  Beds                    BigInt?
  Baths                   BigInt?
  Living_Space            BigInt?           @map("Living Space")
  Address                 String            @unique
  Zip_Code_Population     BigInt?           @map("Zip Code Population")
  Zip_Code_Density        Float?            @map("Zip Code Density")
  County                  String?
  Median_Household_Income BigInt?           @map("Median Household Income")
  Latitude                Float?
  Longitude               Float?
  SizeRank                BigInt?
  RegionName              String?
  ZHVI                    Json?
  Market_Value            Json?
  id                      String            @id
  ownerId                 String?
  favouriteListings       FavoriteListing[]
  Owner                   Owner?            @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ReportItem              ReportItem[]
}

model Owner {
  name         String?
  netWorth     BigInt?
  occupation   String?
  age          Int?
  email        String?
  phone        String?
  purchaseDate DateTime?    @db.Timestamp(6)
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  Property_1   Property_1[]
}

model SavedMapView {
  id             String           @id @default(cuid())
  name           String
  centerLat      Float
  centerLng      Float
  zoom           Int
  createdAt      DateTime         @default(now())
  filters        Json?
  showProperties Boolean?
  showHeatmap    Boolean?
  showClusters   Boolean?
  scope          SavedViewScope   @default(private)
  userId         String
  user           User             @relation(fields: [userId], references: [id])
}

model Report {
  id          String       @id
  name        String
  description String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  status      String       @default("draft")
  type        String
  filters     Json?
  completedAt DateTime?
  error       String?
  startedAt   DateTime?
  filePath    String?
  User        User         @relation(fields: [userId], references: [id])
  ReportItem  ReportItem[]

  @@index([userId])
}

model ReportItem {
  id         String      @id
  reportId   String
  propertyId String?
  zipCode    String?
  order      Int
  Property_1 Property_1? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  Report     Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@index([reportId])
  @@index([zipCode])
}

enum SavedViewScope {
  private
  company
}
